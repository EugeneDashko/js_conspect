//=================================================================================================================================================================
//START Array method's ============================================================================================================================================
//=================================================================================================================================================================
//Перебор массива


// const people = [
//     {name: 'Владилен', age: 25, budget: 40000},
//     {name: 'Елена', age: 17, budget: 3400},
//     {name: 'Игорь', age: 49, budget: 50000},
//     {name: 'Михаил', age: 15, budget: 1800},
//     {name: 'Василиса', age: 24, budget: 25000},
//     {name: 'Виктория', age: 38, budget: 2300},
// ]

//============================
// for (let i=0; i<people.length; i++) {
//     console.log(people[i]);
// }







//====//=====//======//======//=====//======//======//=====//======//======//=====//======//====== FOR OF- ПЕРЕБИРАЮЩИЙ МЕТОД
// for (person of people) {
//     console.log(person) 
// }
//====//=====//======//======//=====//======//======//=====//======//======//=====//======//====== FOR OF- ПЕРЕБИРАЮЩИЙ МЕТОД







//====//=====//======//======//=====//======//======//=====//======//======//=====//======//====== forEach- ПЕРЕБИРАЮЩИЙ МЕТОД

// FOREACH = for

//====//=====//======//======//=====//======//======//=====//======//======//=====//======//====== forEach- ПЕРЕБИРАЮЩИЙ МЕТОД


//ES5:
// people.forEach(function(person, index, peopleArr) {
//     console.log(person)
// })
//ES6:
// people.forEach(person => console.log(person))







//====//=====//======//======//=====//======//======//=====//======//======//=====//======//====== MAP- ПЕРЕБИРАЮЩИЙ МЕТОД

//MAP - с помощью его можно создавать новые массивы ( он принимает такие же аргументы как и меотод forEach).
// И ЗДЕСЬ ВАЖНО ЧТО-ТО ВЕРНУТЬ

//====//=====//======//======//=====//======//======//=====//======//======//=====//======//====== MAP- ПЕРЕБИРАЮЩИЙ МЕТОД


// const newPeople = people.map(person => person.name + ' ' + person.age);
// console.log(newPeople)









//====//=====//======//======//=====//======//======//=====//======//======//=====//======//====== FILTER- ПЕРЕБИРАЮЩИЙ МЕТОД

//FILTER - чтобы фильтровать массив по какому-то условию.
//(возвращает TRUE или FALSE и в зависимости от этого элемент попадет в новый массив или нет.
//возвращает новый массив

//====//=====//======//======//=====//======//======//=====//======//======//=====//======//====== FILTER- ПЕРЕБИРАЮЩИЙ МЕТОД


// const adults =[];
// for (let i=0; i<people.length; i++) {
//     if (people[i].age > 18) {
//         adults.push(people[i])
//     }
// }
// console.log(adults);

//=

//ES5
// const adults = people.filter(person => {
//     if(person.age >= 18) {
//         return true
//     }
// })
// console.log(adults);

//ES6
// const adults = people.filter(person => person.age >= 18);
// console.log(adults)







//====//=====//======//======//=====//======//======//=====//======//======//=====//======//====== EVERY - ПЕРЕБИРАЮЩИЙ МЕТОД

//EVERY- спользуется для проверки массива. Возвращает true, если вызов callback вернёт true для КАЖДОГО элемента arr.

//====//=====//======//======//=====//======//======//=====//======//======//=====//======//====== EVERY - ПЕРЕБИРАЮЩИЙ МЕТОД

// let newArr = people.every(person => {
//     if (person.age > 12) {
//         return true
//     }
// });
// console.log(newArr)







//====//=====//======//======//=====//======//======//=====//======//======//=====//======//====== SOME - ПЕРЕБИРАЮЩИЙ МЕТОД

//SOME- тоже самое что и every, но проверяет есть ли ХОТЯ ОДИН верный элемент, который отвечает приведенным условиям

//====//=====//======//======//=====//======//======//=====//======//======//=====//======//====== SOME - ПЕРЕБИРАЮЩИЙ МЕТОД

// let newArr = people.some(person => {
//     if (person.age > 22) {
//         return true
//     }
// });
// console.log(newArr)







//====//=====//======//======//=====//======//======//=====//======//======//=====//======//====== REDUCE- ПЕРЕБИРАЮЩИЙ МЕТОД

//REDUCE - принимает 2 параметра (1-колбэк функция(принимает тоже 2 параметра total, person (итерируемый элемент по массиву)),
// 2 - начальное значение total. Если не поставить первое занчени то в Total попадет первый элемент массива и расчет насчентся со второго)

//====//=====//======//======//=====//======//======//=====//======//======//=====//======//====== REDUCE- ПЕРЕБИРАЮЩИЙ МЕТОД


// let amount = 0;
// for (let i = 0; i < people.length; i++) {
//     amount += people[i].budget;
// }
// console.log(amount)

//=

// const amount = people.reduce((total, person) => {
//     return total + person.budget;
// }, 0);
// console.log(amount)

//2-й вариант написания:
// const amount = people.reduce((total, person) => total + person.budget, 0);
// console.log(amount)






//====//=====//======//======//=====//======//======//=====//======//======//=====//======//====== SLICE- МЕТОД МАССИВА

//SLICE - Он возвращает НОВЫЙ массив, в который копирует элементы, начиная с индекса start и до end (не включая end)


//====//=====//======//======//=====//======//======//=====//======//======//=====//======//====== SLICE- МЕТОД МАССИВА

    // let arr = ["t", "e", "s", "t"];
    // alert( arr.slice(1, 3) ); // e,s (копирует с 1 до 3)
    // alert( arr.slice(-2) ); // s,t (копирует с -2 до конца)





//====//=====//======//======//=====//======//======//=====//======//======//=====//======//====== SPLICE - МЕТОД МАССИВА

//SPLICE - не копирует, а изменяет исходный массив
// Это универсальный «швейцарский нож» для работы с массивами. Умеет всё: добавлять, удалять и заменять элементы.

//====//=====//======//======//=====//======//======//=====//======//======//=====//======//====== SPLICE - МЕТОД МАССИВА
// //1)
//     let k = [33, 44, 55, 66, 77, 88];
//     k.splice(2, 2); // c 2--го индекса удаляет 2 элемента массива
//     console.log(k) // [33, 44, 77, 88]
// //2)
//     k.splice(2); // [33, 44]
//     console.log(k)
// //3)
//     k.splice(2, 2, 'hi');
//     console.log(k) // [33, 44, "hi", 77, 88]

//     k.splice(0, 0, 'hi', 'dashko', 'Yauheni', 1990, 29, 11);
//     console.log(k) //["hi", "dashko", "Yauheni", 1990, 29, 11, 33, 44, 55, 66, 77, 88]









//====//=====//======//======//=====//======//======//=====//======//======//=====//======//====== CONCAT  - МЕТОД МАССИВА и СТРОКИ

//CONCAT создаёт новый массив, в который копирует поверхностные данные из других массивов и дополнительные значения.
// вложенные копирует по ссылке { {}}.

//====//=====//======//======//=====//======//======//=====//======//======//=====//======//====== CONCAT  - МЕТОД МАССИВА и СТРОКИ

    // let arr = [1, 2];
    // // создать массив из: arr и [3,4] и [5,6]
    // alert( arr.concat([3, 4], [5, 6]) ); // 1,2,3,4,5,6









//====//=====//======//======//=====//======//======//=====//======//======//=====//======//====== ДЕСТРУКТУРИЗАЦИЯ МАССИВА

// ДЕСТРУКТУРИЗАЦИЯ МАССИВА


//====//=====//======//======//=====//======//======//=====//======//======//=====//======//====== ДЕСТРУКТУРИЗАЦИЯ МАССИВА
//  let a = [2, 7];
//  let [b, c] = a;
//  console.log(b,c)







//====//=====//======//======//=====//======//======//=====//======//======//=====//======//====== Find

//Методы для поиска определенных элементов
//Find - служит, чтобы по условию найти какой-либо элемент. приинимает колбэк функицию.

//====//=====//======//======//=====//======//======//=====//======//======//=====//======//====== Find


// const igor = people.find(person => person.name == 'Игорь');
// console.log(igor);







//====//=====//======//======//=====//======//======//=====//======//======//=====//======//====== FindIndex

//FindIndex - работает точо так же как и find, но на выходе получаем индекс

//====//=====//======//======//=====//======//======//=====//======//======//=====//======//====== FindIndex



// const igorIndex = people.findIndex(person => person.name == 'Игорь');
// console.log(igorIndex);




//совмесное использование Find & FindIndex:
// const amount = people
//     .filter(person => person.budget > 3000)
//     .map(person => {
//         return {
//             info: `${person.name} (${person.age})`,
//             budget: Math.sqrt(person.budget)
//         }
//     })
//     .reduce((total, person) => total +person.budget, 0)

// console.log(amount)



//====//=====//======//======//=====//======//======//=====//======//======//=====//======//====== PUSH, POP

//PUSH - добавляет элемент в конец массива.
//POP удаляет последний элемент массива и возвращает его.

//====//=====//======//======//=====//======//======//=====//======//======//=====//======//====== PUSH, POP



//====//=====//======//======//=====//======//======//=====//======//======//=====//======//====== UNSHIFT, SHIFT

//UNSHIFT - Добавляет элемент в начало массива:
//SHIFT - Удаляет из массива первый элемент и возвращает его

//====//=====//======//======//=====//======//======//=====//======//======//=====//======//====== UNSHIFT, SHIFT




//=================================================================================================================================================================
//END Array methond's==============================================================================================================================================
//=================================================================================================================================================================


























//=================================================================================================================================================================
//START методы для String

//====//=====//======//======//=====//======//======//=====//======//======//=====//======//====== CONCAT
    // let c = "hello";
    // let b = "hi";
    // let f = c.concat(b)
    // console.log( f) // hellohi


//====//=====//======//======//=====//======//======//=====//======//======//=====//======//====== SPLIT

//SPLIT - разбивает строку на массив по заданному разделителю

    // let a = "Privet, kak, y, tebya, dela?";
    // let b = a.split(',');
    // console.log(b)

//====//=====//======//======//=====//======//======//=====//======//======//=====//======//====== SPLIT

//====//=====//======//======//=====//======//======//=====//======//======//=====//======//====== JOIN

//JOIN - делает в точности противоположное split

    // let arr = ['Вася', 'Петя', 'Маша'];
    // let str = arr.join(';'); // объединить массив в строку через ;
    // alert( str ); // Вася;Петя;Маша

//====//=====//======//======//=====//======//======//=====//======//======//=====//======//====== JOIN


